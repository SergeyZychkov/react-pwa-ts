/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * react-pwa-ts.Server
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  NotificationSubscription,
  PushNotificationMessage
} from '.././model'
import { customInstance } from '../../../../utilities/api/apiClient';
import type { ErrorType, BodyType } from '../../../../utilities/api/apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postApiPushNotificationSubscribe = (
    notificationSubscription: BodyType<NotificationSubscription>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/PushNotification/Subscribe`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: notificationSubscription
    },
      options);
    }
  


export const getPostApiPushNotificationSubscribeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPushNotificationSubscribe>>, TError,{data: BodyType<NotificationSubscription>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPushNotificationSubscribe>>, TError,{data: BodyType<NotificationSubscription>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPushNotificationSubscribe>>, {data: BodyType<NotificationSubscription>}> = (props) => {
          const {data} = props ?? {};

          return  postApiPushNotificationSubscribe(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPushNotificationSubscribeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPushNotificationSubscribe>>>
    export type PostApiPushNotificationSubscribeMutationBody = BodyType<NotificationSubscription>
    export type PostApiPushNotificationSubscribeMutationError = ErrorType<unknown>

    export const usePostApiPushNotificationSubscribe = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPushNotificationSubscribe>>, TError,{data: BodyType<NotificationSubscription>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiPushNotificationSubscribe>>,
        TError,
        {data: BodyType<NotificationSubscription>},
        TContext
      > => {

      const mutationOptions = getPostApiPushNotificationSubscribeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postApiPushNotificationSendNotification = (
    pushNotificationMessage: BodyType<PushNotificationMessage>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/PushNotification/SendNotification`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pushNotificationMessage
    },
      options);
    }
  


export const getPostApiPushNotificationSendNotificationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPushNotificationSendNotification>>, TError,{data: BodyType<PushNotificationMessage>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPushNotificationSendNotification>>, TError,{data: BodyType<PushNotificationMessage>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPushNotificationSendNotification>>, {data: BodyType<PushNotificationMessage>}> = (props) => {
          const {data} = props ?? {};

          return  postApiPushNotificationSendNotification(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPushNotificationSendNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPushNotificationSendNotification>>>
    export type PostApiPushNotificationSendNotificationMutationBody = BodyType<PushNotificationMessage>
    export type PostApiPushNotificationSendNotificationMutationError = ErrorType<unknown>

    export const usePostApiPushNotificationSendNotification = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPushNotificationSendNotification>>, TError,{data: BodyType<PushNotificationMessage>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiPushNotificationSendNotification>>,
        TError,
        {data: BodyType<PushNotificationMessage>},
        TContext
      > => {

      const mutationOptions = getPostApiPushNotificationSendNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    