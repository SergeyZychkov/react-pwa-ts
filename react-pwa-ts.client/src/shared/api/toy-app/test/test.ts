/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * react-pwa-ts.Server
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  SaveTestValueModel
} from '.././model'
import { customInstance } from '../../../../utilities/api/apiClient';
import type { ErrorType, BodyType } from '../../../../utilities/api/apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getApiTestGetTestValue = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/Test/GetTestValue`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTestGetTestValueQueryKey = () => {
    return [`/api/Test/GetTestValue`] as const;
    }

    
export const getGetApiTestGetTestValueQueryOptions = <TData = Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTestGetTestValueQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTestGetTestValue>>> = ({ signal }) => getApiTestGetTestValue(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTestGetTestValueQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTestGetTestValue>>>
export type GetApiTestGetTestValueQueryError = ErrorType<unknown>


export function useGetApiTestGetTestValue<TData = Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTestGetTestValue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiTestGetTestValue<TData = Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTestGetTestValue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiTestGetTestValue<TData = Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiTestGetTestValue<TData = Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTestGetTestValue>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTestGetTestValueQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiTestSaveTestValue = (
    saveTestValueModel: BodyType<SaveTestValueModel>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/Test/SaveTestValue`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: saveTestValueModel
    },
      options);
    }
  


export const getPostApiTestSaveTestValueMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTestSaveTestValue>>, TError,{data: BodyType<SaveTestValueModel>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTestSaveTestValue>>, TError,{data: BodyType<SaveTestValueModel>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTestSaveTestValue>>, {data: BodyType<SaveTestValueModel>}> = (props) => {
          const {data} = props ?? {};

          return  postApiTestSaveTestValue(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTestSaveTestValueMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTestSaveTestValue>>>
    export type PostApiTestSaveTestValueMutationBody = BodyType<SaveTestValueModel>
    export type PostApiTestSaveTestValueMutationError = ErrorType<unknown>

    export const usePostApiTestSaveTestValue = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTestSaveTestValue>>, TError,{data: BodyType<SaveTestValueModel>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiTestSaveTestValue>>,
        TError,
        {data: BodyType<SaveTestValueModel>},
        TContext
      > => {

      const mutationOptions = getPostApiTestSaveTestValueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    