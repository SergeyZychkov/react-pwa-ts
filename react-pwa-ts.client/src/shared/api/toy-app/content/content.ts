/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * react-pwa-ts.Server
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  FileModel,
  GetApiContentDownloadFileParams,
  PostApiContentUploadBody
} from '.././model'
import { customInstance } from '../../../../utilities/api/apiClient';
import type { ErrorType, BodyType } from '../../../../utilities/api/apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postApiContentUpload = (
    postApiContentUploadBody: BodyType<PostApiContentUploadBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formData = new FormData();
if(postApiContentUploadBody.ContentType !== undefined) {
 formData.append('ContentType', postApiContentUploadBody.ContentType)
 }
if(postApiContentUploadBody.ContentDisposition !== undefined) {
 formData.append('ContentDisposition', postApiContentUploadBody.ContentDisposition)
 }
if(postApiContentUploadBody.Headers !== undefined) {
 formData.append('Headers', JSON.stringify(postApiContentUploadBody.Headers));
 }
if(postApiContentUploadBody.Length !== undefined) {
 formData.append('Length', postApiContentUploadBody.Length.toString())
 }
if(postApiContentUploadBody.Name !== undefined) {
 formData.append('Name', postApiContentUploadBody.Name)
 }
if(postApiContentUploadBody.FileName !== undefined) {
 formData.append('FileName', postApiContentUploadBody.FileName)
 }

      return customInstance<void>(
      {url: `/api/Content/Upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getPostApiContentUploadMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiContentUpload>>, TError,{data: BodyType<PostApiContentUploadBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiContentUpload>>, TError,{data: BodyType<PostApiContentUploadBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiContentUpload>>, {data: BodyType<PostApiContentUploadBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiContentUpload(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiContentUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiContentUpload>>>
    export type PostApiContentUploadMutationBody = BodyType<PostApiContentUploadBody>
    export type PostApiContentUploadMutationError = ErrorType<unknown>

    export const usePostApiContentUpload = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiContentUpload>>, TError,{data: BodyType<PostApiContentUploadBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiContentUpload>>,
        TError,
        {data: BodyType<PostApiContentUploadBody>},
        TContext
      > => {

      const mutationOptions = getPostApiContentUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getApiContentGetFilesFromContentFolder = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FileModel[]>(
      {url: `/api/Content/GetFilesFromContentFolder`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiContentGetFilesFromContentFolderQueryKey = () => {
    return [`/api/Content/GetFilesFromContentFolder`] as const;
    }

    
export const getGetApiContentGetFilesFromContentFolderQueryOptions = <TData = Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContentGetFilesFromContentFolderQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>> = ({ signal }) => getApiContentGetFilesFromContentFolder(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiContentGetFilesFromContentFolderQueryResult = NonNullable<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>>
export type GetApiContentGetFilesFromContentFolderQueryError = ErrorType<unknown>


export function useGetApiContentGetFilesFromContentFolder<TData = Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiContentGetFilesFromContentFolder<TData = Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiContentGetFilesFromContentFolder<TData = Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiContentGetFilesFromContentFolder<TData = Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentGetFilesFromContentFolder>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiContentGetFilesFromContentFolderQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiContentDownloadFile = (
    params?: GetApiContentDownloadFileParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Content/DownloadFile`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiContentDownloadFileQueryKey = (params?: GetApiContentDownloadFileParams,) => {
    return [`/api/Content/DownloadFile`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiContentDownloadFileQueryOptions = <TData = Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError = ErrorType<unknown>>(params?: GetApiContentDownloadFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContentDownloadFileQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiContentDownloadFile>>> = ({ signal }) => getApiContentDownloadFile(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiContentDownloadFileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiContentDownloadFile>>>
export type GetApiContentDownloadFileQueryError = ErrorType<unknown>


export function useGetApiContentDownloadFile<TData = Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiContentDownloadFileParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiContentDownloadFile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiContentDownloadFile<TData = Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError = ErrorType<unknown>>(
 params?: GetApiContentDownloadFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiContentDownloadFile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetApiContentDownloadFile<TData = Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError = ErrorType<unknown>>(
 params?: GetApiContentDownloadFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetApiContentDownloadFile<TData = Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError = ErrorType<unknown>>(
 params?: GetApiContentDownloadFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContentDownloadFile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiContentDownloadFileQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



